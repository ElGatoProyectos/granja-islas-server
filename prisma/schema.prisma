// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

model User {
  id             Int     @id @default(autoincrement())
  role           Role?
  name           String
  last_name      String
  phone          String?
  country_code   String?
  email          String?
  dni            String? @unique
  status_enabled Boolean @default(true)
  status_deleted Boolean @default(false)

  password     String
  created_at   DateTime       @default(dbgenerated("CURRENT_DATE"))
  updated_at   DateTime       @updatedAt @db.Timestamp()
  Supplier     Supplier[]
  ProductLabel ProductLabel[]
  Bank         Bank[]
  Bill         Bill[]
  Voucher      Voucher[]
}

model Company {
  id                        Int      @id @default(autoincrement())
  business_name             String
  business_type             String?
  business_status           String?
  business_direction_fiscal String?
  description               String?
  user                      String
  phone                     String?
  country_code              String?
  ruc                       String   @unique
  key                       String
  status_deleted            Boolean? @default(false)

  created_at   DateTime       @default(dbgenerated("CURRENT_DATE"))
  updated_at   DateTime       @updatedAt
  Supplier     Supplier[]
  Bill         Bill[]
  ProductLabel ProductLabel[]
  Bank         Bank[]
  Voucher      Voucher[]
}

//todo Proveedores
model Supplier {
  id                 Int      @id @default(autoincrement())
  company_id         Int
  user_id_created    Int?
  business_name      String
  business_type      String
  business_status    String
  business_direction String
  description        String?
  ruc                String   @unique
  status_deleted     Boolean? @default(false)

  // added new
  phone        String?
  country_code String?

  created_at DateTime  @default(dbgenerated("CURRENT_DATE"))
  updated_at DateTime  @updatedAt
  Product    Product[]
  Bil        Bill[]

  Company Company @relation(fields: [company_id], references: [id])
  User    User?   @relation(fields: [user_id_created], references: [id])
}

//todo etiquetas que iran en la tabla producto para filtrar
model ProductLabel {
  id              Int      @id @default(autoincrement())
  company_id      Int
  user_created_id Int
  title           String
  slug            String?  @db.Text()
  description     String?  @db.Text()
  status_deleted  Boolean? @default(false)

  // DetailProductLabel DetailProductLabel[]
  Company Company @relation(fields: [company_id], references: [id])
  User    User    @relation(fields: [user_created_id], references: [id])
}

model Bank {
  id              Int      @id @default(autoincrement())
  company_id      Int
  user_created_id Int
  title           String
  slug            String?  @db.Text()
  description     String?  @db.Text()
  status_deleted  Boolean? @default(false)

  Company Company   @relation(fields: [company_id], references: [id])
  User    User      @relation(fields: [user_created_id], references: [id])
  Voucher Voucher[]
}

//! no implementado
// model UnidadMedida {
//   id          Int    @id @default(autoincrement())
//   code        String
//   description String
// }

//todo productos
model Product {
  id           Int     @id @default(autoincrement())
  title        String
  description  String? @db.Text()
  amount       Float
  price        Float   @db.DoublePrecision
  slug         String? @db.Text()
  code_measure String
  unit_measure String
  supplier_id  Int?

  status_deleted Boolean? @default(false)

  created_at DateTime @default(dbgenerated("CURRENT_DATE"))
  updated_at DateTime @updatedAt

  Supplier Supplier? @relation(fields: [supplier_id], references: [id])
  // DetailProductLabel DetailProductLabel[]
}

// model DetailProductLabel {
//   id               Int @id @default(autoincrement())
//   product_id       Int
//   product_label_id Int

//   created_at DateTime @default(dbgenerated("CURRENT_DATE"))
//   updated_at DateTime @updatedAt

//   Label   ProductLabel? @relation(fields: [product_label_id], references: [id])
//   Product Product?      @relation(fields: [product_id], references: [id])
// }

//- facturas
model Bill {
  id              Int  @id @default(autoincrement())
  company_id      Int?
  user_id_created Int?

  num_serie       String
  num_cpe         Int
  code            String
  date            DateTime @db.Date
  period          String
  igv             Float    @default(0.18)
  total           Float    @default(0)
  bill_status     String
  ammount_paid    Float    @default(0)
  ammount_pending Float    @default(0)
  supplier_id     Int?

  created_at DateTime @default(dbgenerated("CURRENT_DATE"))
  updated_at DateTime @updatedAt

  Company  Company?  @relation(fields: [company_id], references: [id])
  Supplier Supplier? @relation(fields: [supplier_id], references: [id])
  User     User?     @relation(fields: [user_id_created], references: [id])
  Voucher  Voucher[]
}

// pending
enum TypeCurrency {
  USD
  PE
}

enum StatusVoucher {
  APPROVED
  REFUSED
  PENDING
}

model Voucher {
  id               Int           @id @default(autoincrement())
  bank_id          Int
  bill_id          Int
  company_id       Int
  user_id_created  Int?
  operation_number String
  amount           Float
  type_currency    TypeCurrency
  date             DateTime      @default(now()) @db.Date
  status           StatusVoucher @default(PENDING)
  status_deleted   Boolean       @default(false)

  Bank    Bank    @relation(fields: [bank_id], references: [id])
  Bill    Bill    @relation(fields: [bill_id], references: [id])
  Company Company @relation(fields: [company_id], references: [id])
  User    User?   @relation(fields: [user_id_created], references: [id])
}

enum NotificationStatus {
  READ
  NO_READ
}

model Notification {
  id                  Int                @id @default(autoincrement())
  title               String
  description         String
  notification_status NotificationStatus
  created_at          DateTime           @default(dbgenerated("CURRENT_DATE"))
  updated_at          DateTime           @updatedAt
}
